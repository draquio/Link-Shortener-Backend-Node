// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String @unique
  password String
  isActive Boolean @default(false)
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  membershipId Int?

  links Link[]
  verificationTokens VerificationToken[]
  loginHistories LoginHistory[]
}

model Link {
  id Int @id @default(autoincrement())
  userId Int
  originalUrl String
  advertisementLink String?
  shortCode String @unique
  createdAt DateTime @default(now())
  expirationDate DateTime?
  isActive Boolean @default(true)

  user User @relation(fields: [userId], references: [id])
  visits Visit[]
}

model Visit {
  id Int @id @default(autoincrement())
  linkId Int
  visitDate DateTime @default(now())
  ip String?
  userAgent String?
  referrer String?
  country String?

  link Link @relation(fields: [linkId], references: [id])
}

model VerificationToken {
  id Int @id @default(autoincrement())
  userId Int
  token String
  expirationDate DateTime
  isUsed Boolean @default(false)

  user User @relation(fields: [userId], references: [id])
}

model LoginHistory {
  id Int @id @default(autoincrement())
  userId Int
  loginDate DateTime @default(now())
  ip String?
  userAgent String?

  user User @relation(fields: [userId], references: [id])
}